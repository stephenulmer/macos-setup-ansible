# -*- mode: ruby -*-
# vi: set ft=ruby :

skip_tags = [ "mas" ]
vault_password_file = "../.vault-password"
mas_credentials_file = "../.mas-credentials.yml"

unless File.exists?(vault_password_file)
  skip_tags.push("vault")
end


Vagrant.configure("2") do |config|
#  config.vm.box = "ulmer/macos"
  config.vm.box = "macinbox"
  config.vm.box_version = "10.15.4"

  config.vm.synced_folder "..", "/vagrant"

  config.vm.define 'testible' do |node|
    if File.exists?(mas_credentials_file)
      node.vm.provision "file", source: mas_credentials_file, destination: ".mas-credentials.yml"
    end

    if File.exists?(vault_password_file)
      node.vm.provision "file", source: vault_password_file, destination: ".vault-password"
    end

    node.vm.provision "ansible", type: "ansible", run: "never" do |ansible|
      ansible.playbook       = "../setup.yml"
      ansible.verbose        = true
      ansible.compatibility_mode = "2.0"
      ansible.galaxy_role_file = "../requirements.yml"
      ansible.galaxy_roles_path = "roles-galaxy"
      ansible.skip_tags = skip_tags
      ansible.vault_password_file = vault_password_file if File.exists?(vault_password_file)
    end

    node.vm.provision "setup", type: "shell", run: "never" do |shell|
      shell.privileged = false
      shell.env = { "ANSIBLE_VAULT_PASSWORD_FILE" => ".vault-password" } if File.exists?(vault_password_file)
      shell.inline = "/bin/bash /vagrant/setup.sh"
    end

    config.trigger.after :up do |trigger|
      trigger.name = "Provisioning Message"
      trigger.info = "All provisioners are configured not to run by default.\nUse:\n\t vagrant provision --provision-with ansible|setup\nto test either method."
    end

  end
end

